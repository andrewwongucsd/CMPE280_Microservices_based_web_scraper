'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _winston = require('winston');

var _winston2 = _interopRequireDefault(_winston);

var _formatHEC = require('../formatHEC');

var _formatHEC2 = _interopRequireDefault(_formatHEC);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var https = require('https');

var SplunkHEC = function (_winston$Transport) {
	_inherits(SplunkHEC, _winston$Transport);

	function SplunkHEC() {
		_classCallCheck(this, SplunkHEC);

		return _possibleConstructorReturn(this, (SplunkHEC.__proto__ || Object.getPrototypeOf(SplunkHEC)).apply(this, arguments));
	}

	_createClass(SplunkHEC, [{
		key: 'log',
		value: function log(level, message, meta) {
			var httpsAgent = new https.Agent({ keepAlive: true });
			var formattedMessage = (0, _formatHEC2.default)({ level, message, meta });

			var data = {
				'time': Date.now(),
				'host': 'localhost',
				'source': `/var/log/apps/heroku/ft-${process.env.SYSTEM_CODE}.log`,
				'sourcetype': '_json',
				'index': 'heroku',
				'event': formattedMessage
			};

			return fetch('https://http-inputs-financialtimes.splunkcloud.com/services/collector/event', {
				method: 'POST',
				headers: {
					'Authorization': `Splunk ${process.env.SPLUNK_HEC_TOKEN}`
				},
				pool: httpsAgent,
				body: JSON.stringify(data)
			}).catch(function () {});
		}
	}]);

	return SplunkHEC;
}(_winston2.default.Transport);

exports.default = SplunkHEC;