'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _winston = require('winston');

var _winston2 = _interopRequireDefault(_winston);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _splunk = require('./transports/splunk');

var _splunk2 = _interopRequireDefault(_splunk);

var _splunkHEC = require('./transports/splunkHEC');

var _splunkHEC2 = _interopRequireDefault(_splunkHEC);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AppLogger = function (_Logger) {
	_inherits(AppLogger, _Logger);

	function AppLogger() {
		var deps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, AppLogger);

		var _this = _possibleConstructorReturn(this, (AppLogger.__proto__ || Object.getPrototypeOf(AppLogger)).call(this, deps));

		Object.assign(_this.deps, { winston: _winston2.default, Splunk: _splunk2.default, SplunkHEC: _splunkHEC2.default }, deps);
		_this.logger = new _this.deps.winston.Logger({
			transports: [new _this.deps.winston.transports.Console({
				colorize: true,
				level: deps.level
			})]
		});
		return _this;
	}

	_createClass(AppLogger, [{
		key: 'doLog',
		value: function doLog() {
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}

			this.logger.log.apply(this.logger, args);
		}
	}, {
		key: 'addConsole',
		value: function addConsole() {
			var level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'info';
			var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

			if (this.logger.transports.console) {
				return;
			}
			this.logger.add(this.deps.winston.transports.Console, Object.assign({ level, formatter: this.deps.formatter, colorize: true }, opts));
		}
	}, {
		key: 'removeConsole',
		value: function removeConsole() {
			if (!this.logger.transports.console) {
				return;
			}
			this.logger.remove('console');
		}
	}, {
		key: 'addSplunk',
		value: function addSplunk(splunkUrl) {
			var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'info';
			var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

			if (this.logger.transports.splunk) {
				return;
			}
			if (!splunkUrl) {
				this.warn('No `splunkUrl` supplied');
				return false;
			}
			this.logger.add(this.deps.Splunk, Object.assign({ level, splunkUrl }, opts));
		}
	}, {
		key: 'removeSplunk',
		value: function removeSplunk() {
			if (!this.logger.transports.splunk) {
				return;
			}
			this.logger.remove('splunk');
		}
	}, {
		key: 'addSplunkHEC',
		value: function addSplunkHEC() {
			var level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'info';
			var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

			if (this.logger.transports.splunkHEC) {
				return;
			}
			this.logger.add(this.deps.SplunkHEC, Object.assign({ level }, opts));
		}
	}, {
		key: 'removeSplunkHEC',
		value: function removeSplunkHEC() {
			if (!this.logger.transports.splunkHEC) {
				return;
			}
			this.logger.remove('splunkHEC');
		}
	}, {
		key: 'clearLoggers',
		value: function clearLoggers() {
			var _this2 = this;

			Object.keys(this.logger.transports).forEach(function (logger) {
				return _this2.logger.remove(logger);
			});
		}
	}]);

	return AppLogger;
}(_logger2.default);

exports.default = AppLogger;